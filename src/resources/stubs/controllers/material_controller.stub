<?php

namespace App\Http\Controllers;

use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use bushart\productmanagement\CrudHelpers;
use App\Models\Color;
use App\Models\Material;
use App\Requests\MaterialRequest;

class MaterialController extends Controller
{
    private $data = [];
    private $success = false;
    private $message = '';

    /**
     * Display a listing of the resource.
     *
     * @return Renderable
     */
    public function index()
    {
        $this->data['headers'] = $this->headers();

        return view('admin.material.index', $this->data);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return Renderable
     */
    public function create()
    {
        $color = Color::get()->toArray();

        return view('admin.material.create', compact('color'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param MaterialRequest $request
     * @return Renderable
     */
    public function store(MaterialRequest $request)
    {
        $data = $request->all();
        if (!empty($data)) {
            unset($data['token']);
            $data['color_id'] = implode(',', $data['color']);
            Material::create($data);
            $this->success = true;
            $this->message = 'Material created successfully';
        }

        return response()->json(['success' => $this->success, 'message' => $this->message]);
    }

    /**
     * Show the specified resource.
     *
     * @param int $id
     * @return Renderable
     */
    public function show($id)
    {
        return view('admin.material.show');
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     * @return Renderable
     */
    public function edit($id)
    {
        $material = Material::find($id);
        $this->data['color'] = Color::get()->toArray();
        $this->data['colorIds'] = !empty($material) ? explode(',', $material->color_id) : [];
        $this->data['data'] = $material;

        return view('admin.material.edit', $this->data);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param MaterialRequest $request
     * @return Renderable
     */
    public function update(MaterialRequest $request)
    {
        $data = $request->all();
        $brand = Material::find($data['id']);
        if (!empty($brand)) {
            if ($request['color']) {
                $data['color_id'] = implode(',', $request['color']);
            } else {
                $brand->update($data);
            }
            $brand->update($data);
            $this->success = true;
            $this->message = 'Material updated successfully';
        }

        return response()->json(['success' => $this->success, 'message' => $this->message]);
    }

    /**
     * Remove the specified resource from storage.
     * @param int $id
     * @return Renderable
     */
    public function destroy($id)
    {
        $obj = Material::find($id);
        if ($obj) {
            $obj->delete();
            $this->success = true;
            $this->message = 'Material deleted successfully';
        }

        return response()->json(['success' => $this->success, 'message' => $this->message]);
    }

    /**
     * this is use to function show material data
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getData(Request $request)
    {
        $this->data = [];
        $this->params = [
            'perPage' => 5,
            'page' => $request->input('page'),
            'search' => $request->input('search'),
            'sortColumn' => $request->input('sortColumn'),
            'sortType' => $request->input('sortType'),
            'dropDownFilters' => $request->input('dropDownFilters'),
        ];
        $this->data = Material::getData($this->params);
        foreach ($this->data['result'] as $key => $row) {
            $colorIds = explode(',', $row->color_name);
            $color = Color::select('name')->whereIn('id', $colorIds)->get()->toArray();
            $colorArray = array_column($color, 'name');
            $arrColor = implode(',', $colorArray);
            $row->color_name = $arrColor;
        }

        return response()->json($this->data);
    }

    /**
     * this is use to function create table header name
     *
     * @return array
     */

    protected function headers()
    {
        $array = [
            ['Material name'], ['color name'], ['actions']
        ];

        return CrudHelpers::generateHeaders($array);
    }
}
