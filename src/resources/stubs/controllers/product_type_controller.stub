<?php

namespace App\Http\Controllers;

use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\Auth;
use App\Models\ProductType;
use App\Models\ProductCategory;
use App\Models\ProductListing;
use App\Models\ProductSubCategory;
use App\Models\ProductAttachment;
use bushart\productmanagement\CrudHelpers;
use App\Requests\ProductTypeRequest;

class ProductTypeController extends Controller
{
    private $data, $params = [];
    private $success = false;
    private $message = '';

    /**
     * Display a listing of the resource.
     * @return Renderable
     */
    public function index()
    {
        $this->data['headers'] = $this->headers();

        return view('admin.product-type.index', $this->data);
    }

    /**
     * Show the form for creating a new resource.
     * @return Renderable
     */
    public function create()
    {
        return view('admin.product-type.create');
    }

    /**
     * Store a newly created resource in storage.
     * @param ProductTypeRequest $request
     * @return Renderable
     */
    public function store(ProductTypeRequest $request)
    {
        $data = $request->all();
        if (!empty($data)) {
            unset($data['token']);
            $data['user_id'] = Auth::user()->id;
            $name = strtolower($data['name']);
            $data['hash_name'] = str_replace(" ", "-", $name);
            ProductType::create($data);
            $this->success = true;
            $this->message = 'Product Type created successfully';
        }

        return response()->json(['success' => $this->success, 'message' => $this->message, 'data' => $this->data]);
    }

    /**
     * Show the specified resource.
     * @param int $id
     * @return Renderable
     */
    public function show($id)
    {
        return view('admin.product-type.show');
    }

    /**
     * Show the form for editing the specified resource.
     * @param int $id
     * @return Renderable
     */
    public function edit($id)
    {
        $this->data['data'] = ProductType::find($id);

        return view('admin.product-type.edit', $this->data);
    }

    /**
     * Update the specified resource in storage.
     * @param ProductTypeRequest $request
     * @return Renderable
     */
    public function update(ProductTypeRequest $request)
    {

        $data = $request->all();
        $productType = ProductType::find($data['id']);
        if (!empty($productType)) {
            $data['user_id'] = Auth::user()->id;
            $productType->update($data);
            $this->success = true;
            $this->message = 'Product Type updated successfully';
        }

        return response()->json(['success' => $this->success, 'message' => $this->message, 'data' => $this->data]);
    }

    /**
     * Remove the specified resource from storage.
     * @param int $id
     * @return Renderable
     */
    public function destroy($id)
    {
        $obj = ProductType::find($id);
        if ($obj) {
            $category = ProductCategory::where('product_type_id', $id)->get()->toArray();
            ProductCategory::where('product_type_id', $id)->delete();
            CrudHelpers::removeImagesFromStorage($category, 'images/category');
            $subCategory = ProductSubCategory::where('product_type_id', $id)->get()->toArray();
            ProductSubCategory::where('product_type_id', $id)->delete();
            CrudHelpers::removeImagesFromStorage($subCategory, 'images/sub-category');
            $listing = ProductListing::where('product_type_id', $id)->get()->toArray();
            ProductListing::where('product_type_id', $id)->delete();
            CrudHelpers::removeImagesFromStorage($listing, 'images/listing');
            foreach ($listing as $key => $row) {
                $attachment = ProductAttachment::where('listing_id', $row['id'])->get()->toArray();
                ProductAttachment::where('listing_id', $row['id'])->delete();
                CrudHelpers::removeImagesFromStorage($attachment, 'images/multiple-product-image');
            }
            $obj->delete();
            $this->success = true;
            $this->message = 'Product Type deleted successfully';
        }

        return response()->json(['success' => $this->success, 'message' => $this->message]);
    }

    /**
     * this is use to function show product sub category data
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getData(Request $request)
    {
        $this->data = [];
        $this->params = [
            'perPage' => 25,
            'page' => $request->input('page'),
            'search' => $request->input('search'),
            'sortColumn' => $request->input('sortColumn'),
            'sortType' => $request->input('sortType'),
            'dropDownFilters' => $request->input('dropDownFilters'),
        ];
        $this->data = ProductType::getData($this->params);

        return response()->json($this->data);
    }

    /**
     * this is use to function create table header name
     *
     * @return array
     */
    protected function headers()
    {
        $array = [
            ['name'], ['actions', '', false]
        ];

        return CrudHelpers::generateHeaders($array);
    }
}
